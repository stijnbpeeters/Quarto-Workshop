---
title: "üëã Welcome to the Quarto workshop"
subtitle: "Create reproducible reports and presentations with Quarto"
author: "Stijn Peeters & Frederick Thielen"
footer: "ESHPM day 2024"
date: "07 November 2024"
format: 
  revealjs:
    reference-location: document
    css: styles.css
    logo: "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fwww.digitalmarketingrbs.nl%2Fwp-content%2Fuploads%2F2020%2F10%2FLogo_Erasmus_Universiteit_Rotterdam.svg.png&f=1&nofb=1&ipt=00db2adccfd8c4b13333b0d509fd41c35bd76fea173e79d0644cb6e308a470d0&ipo=images"
editor_options: 
  chunk_output_type: console
---

## ‚òÄÔ∏è Our session today

------------------------------------------------------------------------

**Deze aanpassen**

::: {style="font-size: 55%;"}
+---------------+-------------------------------------+------------------------------------+
| Time          | Title                               | Description                        |
+===============+=====================================+====================================+
| 14:30 - 14:35 | üëã Welcome and introduction         |                                    |
+---------------+-------------------------------------+------------------------------------+
| 14:35 - 14:45 | üî• Warming-up with an üßä icebreaker | Showcasing a Shiny App integration |
+---------------+-------------------------------------+------------------------------------+
| 14:45 - 14:50 | ü´µ Why are you here?                | Expectation management             |
+---------------+-------------------------------------+------------------------------------+
| 14:50 - 15:00 | üëì What you see and what you want   | WYSIWYG versus WYSIWYM             |
+---------------+-------------------------------------+------------------------------------+
| 15:00 - 14:10 | üìù Mastering Markdown               | Getting to know the basics         |
+---------------+-------------------------------------+------------------------------------+

: Today's session {tbl-colwidths="\[20,35,45\]"}
:::

## üî• Warming-up with an üßä icebreaker

<iframe id="example1" src="https://5hoc60-frederick0thielen.shinyapps.io/icebreaker/" style="border: none; width: 100%; height: 520px" frameborder="0">

</iframe>

## ü´µ Why are you here?

-   What are you hoping to learn today?
-   What are you hoping to achieve with Quarto?
-   What are your expectations for today's session?


::: {.fragment}
Goals of this session:

-  Understand the basics of Quarto
-  Learn how to create reproducible reports and presentations
-  Get familiar with the Quarto ecosystem
:::


# üëì What you see and what you want

## What you see is what you get (WYSIWYG)

::::: columns
::: {.column width="50%"}
<br>

> Software that enables content to be *edited* in a way that closely *resembles its final appearance* when printed or displayed.
:::

::: {.column width="50%"}
![](https://live.staticflickr.com/2645/3953478168_25a5db04c5_c.jpg)
:::
:::::

## WYSIWYG: advantages and limitations

<br>

::: {style="font-size: 80%;"}
+---------------------------------------+-------------------------------------------+
| Advantages                            | Limitations                               |
+=======================================+===========================================+
| User-friendly interface               | Limited precision and customisation       |
+---------------------------------------+-------------------------------------------+
| Immediate visual feedback             | Reproducibility issues                    |
+---------------------------------------+-------------------------------------------+
| No coding required                    | Challenging version control               |
+---------------------------------------+-------------------------------------------+
| Quick layouts and formatting          | Poor scalability                          |
+---------------------------------------+-------------------------------------------+
| Accessibility for non-technical users | Lack of integration with scientific tools |
+---------------------------------------+-------------------------------------------+
:::

## WYSIWYM: what you see is what you mean

::::: columns
::: {.column width="50%"}

![](https://upload.wikimedia.org/wikipedia/commons/thumb/f/fb/ViewsIceberg.svg/1920px-ViewsIceberg.svg.png)

:::

::: {.column width="50%"}
<br>

> Software that enables content to be *edited* in a way that focuses on *semantic structure*, rather than its final appearance.
:::
:::

## What are semantics in this context?

**Semantics** refers to the meaning of a piece of content, rather than its appearance. Like:

-   *Headings* to defined sections and subsections
-   *Lists* like bullet points and numbered lists
-   *Tables* & *Figures*
-   *Citations*
-   *Code blocks*
-   *Equations*

## WYSIWYM: advantages and limitations

<br>

::: {style="font-size: 80%;"}
+---------------------------------------+-----------------------------------------------+
| Advantages                            | Limitations                                   |
+=======================================+===============================================+
| Emphasises content structure          |  Requires familiarity with markup             |
+---------------------------------------+-----------------------------------------------+
| Ensures semantic consistency          | No immediate visual feedback                  |
+---------------------------------------+-----------------------------------------------+
| Highly reproducible                   | Limited flexibility for visual customisation  |
+---------------------------------------+-----------------------------------------------+
| Supports version control              | Higher learning curve for new users           |
+---------------------------------------+-----------------------------------------------+
| Ideal for large, complex documents    | May require post-editing for final formatting |
+---------------------------------------+-----------------------------------------------+
:::

## Pouring milk

A straight-forward task - pour the boxed milk into the glass.

::::: columns
::: {.column width="50%"}
> Easy to use

![](https://j.gifs.com/WPwJ1W.gif){width="750px"}
:::

::: {.column width="50%"}
:::
:::::

## Pouring milk

A straight-forward task - pour the boxed milk into the glass.

::::: columns
::: {.column width="50%"}
> Easy to use

![](https://j.gifs.com/WPwJ1W.gif){width="750px"}
:::

::: {.column width="50%"}
> Understanding the details

![](https://j.gifs.com/z6BO57.gif){width="750px"}
:::
:::::

## Early alternatives to WYSIWYG

1970s: **TeX** typesetting systems (Donald Knuth)

![](https://live.staticflickr.com/7384/13644214153_d97e61b52d_b.jpg){fig-align="center"}

## Developments {visibility="hidden"}

1980s: **SGML** (Standard Generalized Markup Language)

-   Standard for defining generalized markup languages for documents (ISO 8879:1986)

![](https://upload.wikimedia.org/wikipedia/commons/1/1c/Emacs-screenshot-with-PNML.png){fig-align="center"}

## Developments

1990s: **HTML** (Tim Berners-Lee)

-   Standard markup language for documents designed to be displayed in a web browser

![](https://live.staticflickr.com/3194/3032843606_53d11bda96_w.jpg){fig-align="center"}

## Markdown

2004: **Markdown** (John Gruber); *lightweight markup language* with plain-text-formatting syntax

-   Designed for easy readability and writability
-   Converts plain text to rich text (HTML)
-   Widely used for documentation, note-taking, and web content creation
-   Syntax for formatting text includes headers, lists, emphasis, links, and images
-   Filename extensions: `.md`, `.markdown`

![](https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/175px-Markdown-mark.svg.png){.absolute top="10" right="0" width="10%"}

## RMarkdown

2012: **RMarkdown** (Yihui Xie)

-   Integrates R code chunks within Markdown documents
-   Enables execution of R code to generate plots, tables, and analysis results dynamically
-   Supported outputs: HTML, PDF, Word, and slideshows
-   Facilitates reproducible research and data-driven storytelling by combining narrative, code, and output
-   Can include SQL, Python, and other languages
-   Filename extensions: `.Rmd`, `.Rmarkdown`

# üìù Mastering Markdown

## How does RMarkdown work?

![](https://rstudio-conf-2022.github.io/get-started-quarto/materials/images/rmd-knitr.png)

## What is `knitr`?

> An engine for dynamic report generation with R

Its workflow is:

1.  load data
2.  perform data processing
3.  create output data or output graphics

## The future is now: Quarto

<br>

-   Quarto is a command line interface (CLI) that renders plain text formats (`.qmd`, `.rmd`, `.md`)

OR

-   mixed formats (`.ipynb`/Jupyter notebook) into static PDF/Word/HTML reports, books, websites, presentations and more

## Quarto is a "translator"

![Figure by [Allison Horst](https://allisonhorst.com/)](https://ucsb-meds.github.io/creating-quarto-websites/media/quarto_schematic.png)

## Quarto works with `knitr`

![](https://rstudio-conf-2022.github.io/get-started-quarto/materials/images/qmd-knitr.png)

## Quarto works with `jupyter`

![](https://rstudio-conf-2022.github.io/get-started-quarto/materials/images/jupyter-alone.png)

## I already use RMarkdown, can I leave now?

Better not! Here are some reasons why you [should switch](https://www.schlosslab.org/quarto_code_club/quarto_intro.html):

1. **Reduced dependencies**: Quarto includes many features out-of-the-box (e.g., TeX integration)
2. **Quarto is likely to become the new standard**: Many new features likely only for Quarto
3. **Switching is easy**: Quarto is compatible with RMarkdown

## Quarto: the official portal

{{< fa display >}} [https://quarto.org](https://quarto.org)
```{=html}
<iframe width="100%" height="75%" src="https://quarto.org" title="quarto.org"></iframe>
```

## Quarto in RStudio

![](https://quarto.org/docs/tools/images/rstudio-preview.png){fig-align="center"}

## Quarto with jupyter {visibility="hidden"}

![](https://quarto.org/docs/computations/images/python-vscode.png){fig-align="center"}

## Benefits of Quarto (and RMarkdown) {.smaller}

<br>

:::{columns}
:::{.column width="50%"}


![](https://media1.tenor.com/m/VPwzFiDL2a4AAAAC/jack-nicholson-nonono.gif)
:::

:::{.column width="50%"}
-  ‚úÇÔ∏è Copy-pasting
-   ü§∑Ô∏è Manualyl piecing together analyses
-   üîÑ Nightmares when the data is updated and analyses need to re-run
-   üìä Static reports that are out of date the moment they are created
-   üìö Maintaining separate code and documentation
-   üìà Manually updating figures & tables in a report

:::
:::

## Possibilities with Quarto

-   Manuscripts

-   Books

::: {.fragment .highlight-red}
-   Presentations
:::

-   Websites

-   Dashboards

::: {.fragment .highlight-red}
-   Reports
:::

::: {style="text-align: center;"}
# **Static Quarto Reports** {.background-slide-static}
:::

## Change the way you work

::::: columns
::: {.column width="50%"}
````         
---
title: "ggplot2 demo"
author: "Norah Jones"
date: "5/22/2021"
format: 
  html:
    fig-width: 8
    fig-height: 4
    code-fold: true
---

## Air Quality

@fig-airquality further explores the impact of temperature 
  on ozone level.

```{{r}}
#| label: fig-airquality
#| fig-cap: Temperature and ozone level.
#| warning: false

library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) + 

  geom_point() + 
  geom_smooth(method = "loess"
)
```
````
:::

::: {.column width="50%"}
![](https://quarto.org/images/hello-knitr.png)
:::
:::::

## Our workhorse: HTML üèá {.column-screen}

<iframe src="https://quarto.org/docs/output-formats/html-basics.html" width="1000" height="550">

</iframe>

## Anatomy of a Quarto doc - YAML

[YAML](https://yaml.org/)  = Yet Another Markup Language:

- **Purpose**: Configures document metadata and settings.
- **Location**: Placed at the very top of the document.
- **Structure**: Uses key-value pairs in a plain text format.
- **Common Keys**: `title`, `author`, `date`, `output`

## Anatomy of a Quarto doc - YAML {.smaller}

::::: columns
::: {.column width="40%"}
Fairly simple

``` yaml
---
title: "My Document"
format: 
  html:
---
```
:::

::: {.column width="60%"}
Or more complex

``` yaml
title: This is the title
subtitle: Quite a subtitle
date: today
author: 
    - name: Quite a name
      email: quiteaname@test.com

toc: true
toc-depth: 1
bibliography: biblio.bib

format:
    html:
        theme:
            light:
                - cosmo
                - scss/custom.scss
            dark: darkly
        embed-resources: true
    pdf:
        prefer-html: true
```
:::
:::::

## üíª Your turn (1)

<br>

:::::: {style="font-size: 70%;"}
::::: columns
::: {.column width="50%"}
1.  Create an *empty* .qmd file
2.  Add a YAML header with the following:

``` yaml
---
title: "My Document"
format: 
  html:
---
```

3.  Render the document
:::

::: {.column width="50%"}
4.  (Optionally) add some more YAML arguments like:

``` yaml
title: This is the title
subtitle: Quite a subtitle
date: today
author: 
    - name: Quite a name
      email: quiteaname@test.com
```
:::
:::::
::::::

<button id="start-timer" class="custom-button">

Start 3:00 Timer

</button>

::: {#countdown style="font-size: 2em; margin-top: 20px;"}
:::

<script>
let countdownElement = document.getElementById('countdown');
let button = document.getElementById('start-timer');
let countdown;

button.addEventListener('click', function() {
  let time = 180; // 3 minutes in seconds
  countdown = setInterval(function() {
    let minutes = Math.floor(time / 60);
    let seconds = time % 60;
    seconds = seconds < 10 ? '0' + seconds : seconds;
    countdownElement.innerHTML = minutes + ':' + seconds;
    time--;

    if (time < 0) {
      clearInterval(countdown);
      countdownElement.innerHTML = "Time's up!";
    }
  }, 1000);
});
</script>

## Text Formatting

+-------------------------------+-------------------------------+
| Markdown Syntax               | Output                        |
+===============================+===============================+
| ```                           | *italics* and **bold**        |
| *italics* and **bold**        |                               |
| ```                           |                               |
+-------------------------------+-------------------------------+
| ```                           | superscript^2^ / subscript~2~ |
| superscript^2^ / subscript~2~ |                               |
| ```                           |                               |
+-------------------------------+-------------------------------+
| ```                           | ~~strikethrough~~             |
| ~~strikethrough~~             |                               |
| ```                           |                               |
+-------------------------------+-------------------------------+
| ```                           | `verbatim code`               |
| `verbatim code`               |                               |
| ```                           |                               |
+-------------------------------+-------------------------------+

## Headings

::: {style="font-size: 80%;"}
+-----------------+-----------------+
| Markdown Syntax | Output          |
+=================+=================+
| ```             | # Header 1      |
| # Header 1      |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | ## Header 2     |
| ## Header 2     |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | ### Header 3    |
| ### Header 3    |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | #### Header 4   |
| #### Header 4   |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | ##### Header 5  |
| ##### Header 5  |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | ###### Header 6 |
| ###### Header 6 |                 |
| ```             |                 |
+-----------------+-----------------+
:::

## Embed code

Huge range of possibilities
-   As long as it starts with ```` ```{} ```` and ends with ```` ``` ````
-   Between the braces, specify the code language (e.g., ```` ```{r} ```` for R code)

## Example of R code embedded

::: {style="font-size: 65%;"}
```{r}
#| echo: fenced
#| label: fig-airquality
#| fig-cap: Temperature and ozone level
#| fig-width: 10
#| fig-height: 3

library(ggplot2)

ggplot(airquality, aes(Temp, Ozone)) + 
  geom_point() + 
  geom_smooth(method = "loess")
```
:::

## Code Chunk Options in Quarto

-   `echo`: Show code (`true`) or hide code (`false`)
-   `eval`: Execute code (`true`) or skip execution (`false`)
-   `include`: Include or exclude both code and output
-   `warning` and `error` : Show or hide warnings/errors

``` yaml
#| echo: true
#| eval: true
#| warning: false
#| error: false
```

## üíª Your turn (2)

1.  Download `Exercise 2.qmd` at **bit.ly/eshpm-quarto** and open it in RStudio

2.  Complete the exercises in the document and try rendering it.

<button id="start-timer" class="custom-button">

Start 10:00 Timer

</button>

::: {style="font-size: 2em; margin-top: 20px;"}
:::

<script>
let countdownElement = document.getElementById('countdown');
let button = document.getElementById('start-timer');
let countdown;

button.addEventListener('click', function() {
  let time = 600; // 10 minutes in seconds
  countdown = setInterval(function() {
    let minutes = Math.floor(time / 60);
    let seconds = time % 60;
    seconds = seconds < 10 ? '0' + seconds : seconds;
    countdownElement.innerHTML = minutes + ':' + seconds;
    time--;

    if (time < 0) {
      clearInterval(countdown);
      countdownElement.innerHTML = "Time's up!";
    }
  }, 1000);
});
</script>

# ü§î Questions?

## \# Presentations {.background-slide-presentation}

![](Images/MP.gif)

## Quarto presentation formats

::: {.fragment .highlight-red}
-   **revealjs**
:::

-   **beamer** for LaTex slides
-   Powerpoint for when you **have** to collaborate via **Office** üòí

## revealjs

`reveal.js` is an open source HTML presentation framework for creating interactive, beautiful web-based presentations for free. üòÅ

-   Embed R code and show results inline
-   Add animations and transitions
-   Create responsive and interactive presentations

## How difficult is revealjs?

## How difficult is revealjs?

``` yaml
format: revealjs

## Slide

## Slide
```

![](Images/easy.gif)

## üíª Short Exercise (3)

1.  Turn the last document into a presentation rather than a report. Use the same title and the chapter names as slide titles.

<button id="start-timer" class="custom-button">

Start 4:00 Timer

</button>

::: {style="font-size: 2em; margin-top: 20px;"}
:::

<script>
let countdownElement = document.getElementById('countdown');
let button = document.getElementById('start-timer');
let countdown;

button.addEventListener('click', function() {
  let time = 240; // 3 minutes in seconds
  countdown = setInterval(function() {
    let minutes = Math.floor(time / 60);
    let seconds = time % 60;
    seconds = seconds < 10 ? '0' + seconds : seconds;
    countdownElement.innerHTML = minutes + ':' + seconds;
    time--;

    if (time < 0) {
      clearInterval(countdown);
      countdownElement.innerHTML = "Time's up!";
    }
  }, 1000);
});
</script>

## Some features of revealjs

## Some extra's for presentations

## Long exercise

Do we have time for this?

## Topics worth exploring


## Quarto advanced and further readings

- [Quarto: The Definitive Guide](https://quarto-tdg.org/)
- [Introduction to Quarto presentation](https://lennartwittkuhn.com/quarto-workshop/#/title-slide)
- [Literate programming in R](https://elixir-europe-training.github.io/ELIXIR-TrP-LiterateProgrammingR-CodeRep/)
- Add [fontawesome](https://fontawesome.com/) icons to your Quarto with a [lua filter](https://github.com/quarto-ext/fontawesome?tab=readme-ov-file)

::: {style="font-size: 85%;"}
### Before further embarking on the Quarto journey

-   HTML for web publishing: structuring content
-   CSS for styling: customising appearance beyond WYSIWYG capabilities
-   LaTeX for typesetting: producing high-quality `.pdf` documents
-   Pandoc for document conversion: converting between formats
-   RMarkdown for reproducible research: integrating R code and text
-   Jupyter for interactive computing: combining code, text, and output
-   Quarto for computational narratives: creating computational documents
-   Mermaid for diagrams: creating all sorts of diagrams
:::

::: {style="text-align: center;"}
# ü§î Questions
:::

## Ideas for the workshop

-   [Get started with Quarto](https://rstudio-conf-2022.github.io/get-started-quarto/)
-   [R Quarto tutorial](https://www.appsilon.com/post/r-quarto-tutorial)
-   [Awesome Quarto](https://github.com/mcanouil/awesome-quarto?tab=readme-ov-file#tutorials--workshops)
-   [RMarkdown.net](https://rmarkdown.net/quarto/)
